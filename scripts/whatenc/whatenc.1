.\" Manpage for whatenc
.TH WHATENC 1 "2025-08-26" "1.0" "WhatEnc Manual"
.SH NAME
whatenc \- Detect and decode various text encodings

.SH SYNOPSIS
.B whatenc
[\fIoptions\fR] [\fIfiles\fR]

.SH DESCRIPTION
\fBwhatenc\fR is a professional and pipe-friendly Linux tool designed to detect the encoding type of input text and optionally decode it. 
It supports multiple encodings including base64, base32, hex, ROT13, ROT47, URL encoding, and ASCII85. 

The tool can accept input from files, pipes, here-strings, or direct arguments.

.SH OPTIONS
.TP
\fB-d\fR
Decode the detected encoding.
.TP
\fB-o \fIfilename\fR
Output decoded content to the specified file.
.TP
\fB-v\fR
Enable verbose mode, printing detailed information about detection and decoding.
.TP
\fB-q, --quiet\fR
Suppress banners and extra informational messages for clean piping.
.TP
\fB-h, --help\fR
Display a detailed help message.
.TP
\fB--list-encodings\fR
Display a list of all supported encodings.

.SH INPUT METHODS
The input can be provided in multiple ways:
.IP \(bu 2
File path:
.RS
.nf
whatenc input.txt
.fi
.RE
.IP \(bu 2
Pipe:
.RS
.nf
cat encoded.txt | whatenc -d
.fi
.RE
.IP \(bu 2
Here-string:
.RS
.nf
whatenc -d << "c29tZSBlbmNvZGluZw=="
.fi
.RE
.IP \(bu 2
Direct argument:
.RS
.nf
whatenc "encoded_text"
.fi
.RE

.SH EXAMPLES
.TP
Detect encoding of a file:
.nf
whatenc encoded.txt
.fi
.TP
Decode piped input:
.nf
cat encoded.txt | whatenc -d
.fi
.TP
Decode with output to file:
.nf
whatenc -d -o decoded.txt encoded.txt
.fi
.TP
Suppress banners for scripting:
.nf
echo "c29tZSBlbmNvZGluZw==" | whatenc -d -q
.fi
.TP
List all supported encodings:
.nf
whatenc --list-encodings
.fi

.SH EXIT STATUS
.TP
0
Success
.TP
1
Unknown encoding or invalid input
.TP
2
Decoding failed

.SH AUTHOR
Generated by AI, adapted for professional use.

.SH NOTES
This tool is pipe-friendly: all informational messages are sent to \fBstderr\fR while decoded/raw output is sent to \fBstdout\fR. 
This ensures compatibility when piping output to other tools.

.SH SEE ALSO
base64(1), xxd(1), tr(1), perl(1)
